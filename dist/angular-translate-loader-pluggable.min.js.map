{"version":3,"sources":["angular-translate-loader-pluggable.js"],"names":["global","factory","define","amd","exports","mod","angularTranslateLoaderPluggable","this","translatePluggableLoaderProvider","loaders","translationTable","useLoader","loaderName","options","push","name","translations","language","angular","extend","$get","$q","$injector","deferred","defer","loaderInstances","resolve","key","promise","i","length","loader","loaderPromise","get","all","then","result","moduleName","module","provider"],"mappings":"CAAA,SAAWA,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,WAAYD,OACf,IAAuB,mBAAZG,SAChBH,EAAQG,aACH,CACL,GAAIC,IACFD,WAEFH,GAAQI,EAAID,SACZJ,EAAOM,gCAAkCD,EAAID,UAE9CG,KAAM,SAAUH,GACjB,YALF,SAASI,KACP,GAAIC,MACAC,IAEJH,MAAKI,UAAY,SAAUC,EAAYC,GAMrC,MALAJ,GAAQK,MACNC,KAAMH,EACNC,QAASA,IAGJN,MAGTA,KAAKS,aAAe,SAAUC,EAAUD,GAGtC,MAFAN,GAAiBO,GAAYC,QAAQC,UAAWT,EAAiBO,GAAWD,GAErET,MAGTA,KAAKa,MAAA,KAAA,YAAO,SAAUC,EAAIC,GACxB,MAAO,UAAUT,GACf,GAAIU,GAAWF,EAAGG,QAEdC,IAGJA,GAAgBX,KAAK,WACnB,GAAIS,GAAWF,EAAGG,OAIlB,OAFAD,GAASG,QAAQhB,EAAiBG,EAAQc,MAEnCJ,EAASK,WAIlB,KAAK,GAAIC,GAAI,EAAGA,EAAIpB,EAAQqB,OAAQD,IAAK,CACvC,GAAIE,GAAStB,EAAQoB,GAGjBG,EAAgBV,EAAUW,IAAIF,EAAOhB,MAAMG,QAAQC,OAAON,EAASkB,EAAOlB,SAC9EY,GAAgBX,KAAKkB,GAevB,MAZAX,GAAGa,IAAIT,GACJU,KAAK,SAAU1B,GAGd,IAAK,GAFD2B,GAEKP,EAAI,EAAGA,EAAIpB,EAAQqB,OAAQD,IAClCO,EAASlB,QAAQC,UAAWiB,EAAQ3B,EAAQoB,GAG9CN,GAASG,QAAQU,KAIdb,EAASK,WA/DtB,GAAIS,GAAa,oCAEjBnB,SACGoB,OAAOD,GACN,2BAEDE,SAAS,2BAA4B/B,GA+DjB,mBAAZJ,IAA2BkC,QAAoC,gBAAnBA,QAAOlC,UAC5DkC,OAAOlC,SACLW,KAAMsB","file":"angular-translate-loader-pluggable.min.js","sourcesContent":["var moduleName = 'angular-translate-loader-pluggable';\n\nangular\n  .module(moduleName, [\n    'pascalprecht.translate'\n  ])\n  .provider('translatePluggableLoader', translatePluggableLoaderProvider);\n\nfunction translatePluggableLoaderProvider() {\n  var loaders = [];\n  var translationTable = {};\n\n  this.useLoader = function (loaderName, options) {\n    loaders.push({\n      name: loaderName,\n      options: options\n    });\n\n    return this;\n  };\n\n  this.translations = function (language, translations) {\n    translationTable[language] = angular.extend({}, translationTable[language], translations);\n\n    return this;\n  };\n\n  this.$get = function ($q, $injector) {\n    return function (options) {\n      var deferred = $q.defer();\n\n      var loaderInstances = [];\n\n      // lookup in translation table\n      loaderInstances.push(function () {\n        var deferred = $q.defer();\n\n        deferred.resolve(translationTable[options.key]);\n\n        return deferred.promise;\n      } ());\n\n      // lookup in loaders\n      for (var i = 0; i < loaders.length; i++) {\n        var loader = loaders[i];\n\n        // get the loader and resolve it, passing in the required options\n        var loaderPromise = $injector.get(loader.name)(angular.extend(options, loader.options));\n        loaderInstances.push(loaderPromise);\n      }\n\n      $q.all(loaderInstances)\n        .then(function (loaders) {\n          var result;\n\n          for (var i = 0; i < loaders.length; i++) {\n            result = angular.extend({}, result, loaders[i]);\n          }\n\n          deferred.resolve(result);\n        });\n\n\n      return deferred.promise;\n    };\n  };\n}\n\n// commonjs export\nif (typeof exports !== 'undefined' && module && typeof module.exports === \"object\") {\n  module.exports = {\n    name: moduleName\n  };\n}\n"]}
